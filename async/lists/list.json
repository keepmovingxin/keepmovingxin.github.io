{"_total":7,"_totalPage":1,"_page":1,"posts":[{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":2}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":2}],"url":"/async/posts/2016/05/09/Cocos2dx-CCRenderTexture.json","date":1462804288000,"path":{"year":2016,"month":5,"day":9,"name":"Cocos2dx-CCRenderTexture"},"title":"Cocos2d-x中动态纹理CCRenderTexture的使用","permalink":"http://blog.keepmovingxin.com/2016/05/09/Cocos2dx-CCRenderTexture/","content":"<p>记录一下Cocos2d-x中动态纹理CCRenderTexture的各种应用，实现截屏、阴影等等</p>\n<h3 id=\"截取当前屏幕图片\"><a href=\"#截取当前屏幕图片\" class=\"headerlink\" title=\"截取当前屏幕图片\"></a>截取当前屏幕图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--[[</span><br><span class=\"line\">    @des:截取当前屏幕图片</span><br><span class=\"line\">    @ret:截取的图片路径</span><br><span class=\"line\">--]]</span><br><span class=\"line\">function getScreenshots()</span><br><span class=\"line\">    local size = CCDirector:sharedDirector():getWinSize()</span><br><span class=\"line\">    local in_texture = CCRenderTexture:create(size.width, size.height,kCCTexture2DPixelFormat_RGBA8888)</span><br><span class=\"line\">    in_texture:getSprite():setAnchorPoint( ccp(0.5,0.5) )</span><br><span class=\"line\">    in_texture:setPosition( ccp(size.width/2, size.height/2) )</span><br><span class=\"line\">    in_texture:setAnchorPoint( ccp(0.5,0.5) )</span><br><span class=\"line\"></span><br><span class=\"line\">    local runingScene = CCDirector:sharedDirector():getRunningScene()</span><br><span class=\"line\">    in_texture:begin()</span><br><span class=\"line\">    runingScene:visit()</span><br><span class=\"line\">    in_texture:endToLua()</span><br><span class=\"line\"></span><br><span class=\"line\">    local picPath = CCFileUtils:sharedFileUtils():getWritablePath() .. &quot;shareTempScreenshots.jpg&quot;</span><br><span class=\"line\">    print(&quot;截屏图片:&quot;,in_texture:saveToFile(picPath))</span><br><span class=\"line\">    return picPath</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>"},{"tags":[{"name":"shell","permalink":"http://blog.keepmovingxin.com/tags/shell/","url":"/async/tags/shell.json","count":1}],"categories":[{"name":"工具","permalink":"http://blog.keepmovingxin.com/categories/工具/","url":"/async/categories/工具.json","count":5}],"url":"/async/posts/2016/05/02/Learn-shell.json","date":1462179052000,"path":{"year":2016,"month":5,"day":2,"name":"Learn-shell"},"title":"shell学习笔记","permalink":"http://blog.keepmovingxin.com/2016/05/02/Learn-shell/","content":"<h3 id=\"1-Shell脚本\"><a href=\"#1-Shell脚本\" class=\"headerlink\" title=\"1.Shell脚本\"></a>1.Shell脚本</h3><h4 id=\"1-1-格式\"><a href=\"#1-1-格式\" class=\"headerlink\" title=\"1.1 格式\"></a>1.1 格式</h4><p>首行        #!/bin/bash    指定解释器</p>\n<h4 id=\"1-2-注释\"><a href=\"#1-2-注释\" class=\"headerlink\" title=\"1.2 注释\"></a>1.2 注释</h4><p>‘#’开头的行，’#!’是例外</p>\n<p>此外，# 是特殊字符，可以出现在一些参数代换结构和在数值常量表达式中，具有特殊含义，而不会开启一个注释。‘#’也不会开启一个注释。</p>"},{"tags":[{"name":"pngquant","permalink":"http://blog.keepmovingxin.com/tags/pngquant/","url":"/async/tags/pngquant.json","count":1}],"categories":[{"name":"工具","permalink":"http://blog.keepmovingxin.com/categories/工具/","url":"/async/categories/工具.json","count":5}],"url":"/async/posts/2016/04/30/pngquant-compress-png.json","date":1462021888000,"path":{"year":2016,"month":4,"day":30,"name":"pngquant-compress-png"},"title":"利用pngquant压缩png图片","permalink":"http://blog.keepmovingxin.com/2016/04/30/pngquant-compress-png/","content":"<p>项目包体积越来越大，为了压缩包大小找到一个比较好用的png图片压缩工具，在这记录一下。</p>\n<h3 id=\"安装并配置全局变量\"><a href=\"#安装并配置全局变量\" class=\"headerlink\" title=\"安装并配置全局变量\"></a>安装并配置全局变量</h3><p>安装：</p>\n<p>去官网下载压缩包 或者 源码: <code>git clone git://github.com/pornel/pngquant.git</code></p>\n<p>也可以使用HomeBrew安装：<code>brew install pngquant</code></p>\n<p>配置全局变量(使用HomeBrew安装请忽略)：</p>\n<p><code>ln –s /下载的位置/pngquant /usr/local/bin/pngquant</code></p>\n<p>pngquant 可以愉快的玩耍啦！</p>"},{"tags":[{"name":"Vim","permalink":"http://blog.keepmovingxin.com/tags/Vim/","url":"/async/tags/Vim.json","count":1}],"categories":[{"name":"工具","permalink":"http://blog.keepmovingxin.com/categories/工具/","url":"/async/categories/工具.json","count":5}],"url":"/async/posts/2016/04/29/vi-vim-delete-M.json","date":1461908371000,"path":{"year":2016,"month":4,"day":29,"name":"vi-vim-delete-M"},"title":"vi/vim显示中文字符并且去掉^M的方法","permalink":"http://blog.keepmovingxin.com/2016/04/29/vi-vim-delete-M/","content":"<ul>\n<li>处理项目xml配置时vim打开经常会碰到中文显示不正常的现象，也就是传说中的乱码，搜索找到一个解决办法，记录一下，但是gbk编码的正常了，utf8的又不对了，于是稍微改了一点。</li>\n</ul>"},{"tags":[{"name":"Linux","permalink":"http://blog.keepmovingxin.com/tags/Linux/","url":"/async/tags/Linux.json","count":1}],"categories":[{"name":"工具","permalink":"http://blog.keepmovingxin.com/categories/工具/","url":"/async/categories/工具.json","count":5}],"url":"/async/posts/2016/04/28/Linux-Commond.json","date":1461830572000,"path":{"year":2016,"month":4,"day":28,"name":"Linux-Commond"},"title":"Linux常用命令学习","permalink":"http://blog.keepmovingxin.com/2016/04/28/Linux-Commond/","content":"<h3 id=\"同步时间\"><a href=\"#同步时间\" class=\"headerlink\" title=\"同步时间\"></a>同步时间</h3><p>以管理员身份执行如下命令，可以自动与网络时间同步：<br>time.nist.gov 是一个时间服务器</p>\n<p><code>$ rdate -s time.nist.gov</code></p>"},{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":2}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":2}],"url":"/async/posts/2016/04/27/cocos2d-x-GraySprite.json","date":1461750466000,"path":{"year":2016,"month":4,"day":27,"name":"cocos2d-x-GraySprite"},"title":"Cocos2d-x使用CCGLProgram和Shader文件实现精灵置灰","permalink":"http://blog.keepmovingxin.com/2016/04/27/cocos2d-x-GraySprite/","content":"<h4 id=\"1-实现方法：CCGraySprite-继承自-CCSprite-覆盖initWithTexture和draw方法实现置灰。\"><a href=\"#1-实现方法：CCGraySprite-继承自-CCSprite-覆盖initWithTexture和draw方法实现置灰。\" class=\"headerlink\" title=\"1. 实现方法：CCGraySprite 继承自 CCSprite 覆盖initWithTexture和draw方法实现置灰。\"></a>1. 实现方法：<code>CCGraySprite</code> 继承自 <code>CCSprite</code> 覆盖<code>initWithTexture</code>和<code>draw</code>方法实现置灰。</h4><h5 id=\"方法和属性声明：\"><a href=\"#方法和属性声明：\" class=\"headerlink\" title=\"方法和属性声明：\"></a>方法和属性声明：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CCGraySprite : public CCSprite&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    CCGraySprite();</span><br><span class=\"line\">    virtual ~CCGraySprite();</span><br><span class=\"line\">    static CCGraySprite* create(const char* pszFileName);</span><br><span class=\"line\">    bool initWithTexture(CCTexture2D* pTexture, const CCRect&amp; tRect);</span><br><span class=\"line\">    static CCGraySprite* createWithSprite(CCSprite *pSprite);</span><br><span class=\"line\">    static CCGraySprite* createWithNodeAndItChild(CCNode *pNode);</span><br><span class=\"line\">    void setGray(bool isGray);</span><br><span class=\"line\">    virtual void draw();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    bool m_isGray;</span><br><span class=\"line\">    CCGLProgram* pProgram;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>m_isGray</code> 是否置灰</li>\n<li><code>pProgram</code> 保存置灰的GL程序</li>\n</ul>"},{"tags":[{"name":"Git","permalink":"http://blog.keepmovingxin.com/tags/Git/","url":"/async/tags/Git.json","count":1}],"categories":[{"name":"工具","permalink":"http://blog.keepmovingxin.com/categories/工具/","url":"/async/categories/工具.json","count":5}],"url":"/async/posts/2016/04/27/Git-Config.json","date":1461745888000,"path":{"year":2016,"month":4,"day":27,"name":"Git-Config"},"title":"Git Config命令查看配置文件","permalink":"http://blog.keepmovingxin.com/2016/04/27/Git-Config/","content":"<p>git config命令的基本使用</p>\n<h3 id=\"配置文件如何生效\"><a href=\"#配置文件如何生效\" class=\"headerlink\" title=\"配置文件如何生效\"></a>配置文件如何生效</h3><p>对于 git 来说，配置文件的权重是仓库&gt;全局&gt;系统。Git 会使用这一系列的配置文件来存储你定义的偏好，它首先会查找 /etc/gitconfig 文件（系统级），该文件含有对系统上所有用户及他们所拥有的仓库都生效的配置值。接下来 Git 会查找每个用户的 ~/.gitconfig 文件（全局级）。最后 Git 会查找由用户定义的各个库中Git目录下的配置文件 .git/config（仓库级），该文件中的值只对当前所属仓库有效。以上阐述的三 层配置从一般到特殊层层推进，如果定义的值有冲突，以后面层中定义的为准，例如：.git/config 和 /etc/gitconfig 的较量中， .git/config 取得了胜利。</p>"}]}