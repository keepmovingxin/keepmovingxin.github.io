{"_total":18,"_totalPage":2,"_page":2,"posts":[{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":3},{"name":"Lua","permalink":"http://blog.keepmovingxin.com/tags/Lua/","url":"/async/tags/Lua.json","count":9},{"name":"tolua","permalink":"http://blog.keepmovingxin.com/tags/tolua/","url":"/async/tags/tolua.json","count":1}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":11}],"url":"/async/posts/2016/05/14/Cocos2dx-tolua++.json","date":1463234968000,"path":{"year":2016,"month":5,"day":14,"name":"Cocos2dx-tolua++"},"title":"(译)tolua参考手册--accessing C/C++ code from Lua","permalink":"http://blog.keepmovingxin.com/2016/05/14/Cocos2dx-tolua++/","content":"<p>项目使用Cocos2dx+lua框架做的，用到luabinding实现C++代码绑定到lua层使用，所以学习一下tolua++工具的原理和使用，在这做个记录。</p>\n<p>tolua++是tolua的扩展版本，是一款能够集成C/C++与lua代码的工具。在面向C++方面，tolua++包含了一些新的特性比如：</p>\n<ul>\n<li>支持<code>std::string</code>作为基本类型（这个可以由一个命令行选项关闭）</li>\n<li>支持类模板</li>\n</ul>\n<p><a href=\"http://www.tecgraf.puc-rio.br/~celes/tolua/\">tolua</a>这款工具，极大的简化了C/C++代码与lua代码的集成。基于一个干净的头文件（或者从实际头文件中提取），tolua会自动生成从lua访问C/C++功能的绑定代码。使用Lua API和标记方法设施，tolua解析C/C++常数，外部变量、函数、类和方法绑定到Lua。</p>\n<p><a href=\"http://webserver2.tecgraf.puc-rio.br/~celes/tolua/\">官网</a><br><a href=\"http://webserver2.tecgraf.puc-rio.br/~celes/tolua/tolua-3.2.html\">官网文档</a></p>"},{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":3}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":11}],"url":"/async/posts/2016/05/09/Cocos2dx-CCRenderTexture.json","date":1462804288000,"path":{"year":2016,"month":5,"day":9,"name":"Cocos2dx-CCRenderTexture"},"title":"Cocos2d-x中动态纹理CCRenderTexture的使用","permalink":"http://blog.keepmovingxin.com/2016/05/09/Cocos2dx-CCRenderTexture/","content":"<p>记录一下Cocos2d-x中动态纹理<code>CCRenderTexture</code>的各种应用，实现截屏、阴影等等<br>"},{"tags":[{"name":"shell","permalink":"http://blog.keepmovingxin.com/tags/shell/","url":"/async/tags/shell.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/05/02/Learn-shell.json","date":1462179052000,"path":{"year":2016,"month":5,"day":2,"name":"Learn-shell"},"title":"shell学习笔记","permalink":"http://blog.keepmovingxin.com/2016/05/02/Learn-shell/","content":"<h3 id=\"Shell脚本\"><a href=\"#Shell脚本\" class=\"headerlink\" title=\"Shell脚本\"></a>Shell脚本</h3><h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h4><p>首行        <code>#!/bin/bash 指定解释器</code></p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p><code>&#39;#&#39;</code>开头的行，<code>&#39;#!&#39;</code>是例外<br>此外，<code>#</code> 是特殊字符，可以出现在一些参数代换结构和在数值常量表达式中，具有特殊含义，而不会开启一个注释。<code>‘\\#’</code>也不会开启一个注释。</p>"},{"tags":[{"name":"pngquant","permalink":"http://blog.keepmovingxin.com/tags/pngquant/","url":"/async/tags/pngquant.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/30/pngquant-compress-png.json","date":1462021888000,"path":{"year":2016,"month":4,"day":30,"name":"pngquant-compress-png"},"title":"利用pngquant压缩png图片","permalink":"http://blog.keepmovingxin.com/2016/04/30/pngquant-compress-png/","content":"<p>项目包体积越来越大，为了压缩包大小找到一个比较好用的png图片压缩工具，在这记录一下。</p>\n<h3 id=\"安装并配置全局变量\"><a href=\"#安装并配置全局变量\" class=\"headerlink\" title=\"安装并配置全局变量\"></a>安装并配置全局变量</h3><p>安装：<br>去官网下载压缩包 或者 源码: <code>git clone git://github.com/pornel/pngquant.git</code><br>也可以使用HomeBrew安装：<code>brew install pngquant</code><br>配置全局变量(使用HomeBrew安装请忽略)：<br><code>ln –s /下载的位置/pngquant /usr/local/bin/pngquant</code><br>pngquant 可以愉快的玩耍啦！</p>"},{"tags":[{"name":"Vim","permalink":"http://blog.keepmovingxin.com/tags/Vim/","url":"/async/tags/Vim.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/29/vi-vim-delete-M.json","date":1461908371000,"path":{"year":2016,"month":4,"day":29,"name":"vi-vim-delete-M"},"title":"vi/vim显示中文字符并且去掉^M的方法","permalink":"http://blog.keepmovingxin.com/2016/04/29/vi-vim-delete-M/","content":"<p>处理项目xml配置时vim打开经常会碰到中文显示不正常的现象，也就是传说中的乱码，搜索找到一个解决办法，记录一下，但是gbk编码的正常了，utf8的又不对了，于是稍微改了一点。</p>"},{"tags":[{"name":"Linux","permalink":"http://blog.keepmovingxin.com/tags/Linux/","url":"/async/tags/Linux.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/28/Linux-Commond.json","date":1461830572000,"path":{"year":2016,"month":4,"day":28,"name":"Linux-Commond"},"title":"Linux常用命令学习","permalink":"http://blog.keepmovingxin.com/2016/04/28/Linux-Commond/","content":"<h3 id=\"同步时间\"><a href=\"#同步时间\" class=\"headerlink\" title=\"同步时间\"></a>同步时间</h3><p>以管理员身份执行如下命令，可以自动与网络时间同步：<br>time.nist.gov 是一个时间服务器<br><code>$ rdate -s time.nist.gov</code></p>"},{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":3}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":11}],"url":"/async/posts/2016/04/27/cocos2d-x-GraySprite.json","date":1461750466000,"path":{"year":2016,"month":4,"day":27,"name":"cocos2d-x-GraySprite"},"title":"Cocos2d-x使用CCGLProgram和Shader文件实现精灵置灰","permalink":"http://blog.keepmovingxin.com/2016/04/27/cocos2d-x-GraySprite/","content":"<h4 id=\"1-实现方法\"><a href=\"#1-实现方法\" class=\"headerlink\" title=\"1. 实现方法\"></a>1. 实现方法</h4><p><code>CCGraySprite</code> 继承自 <code>CCSprite</code> 覆盖<code>initWithTexture</code>和<code>draw</code>方法实现置灰。<br>"},{"tags":[{"name":"Git","permalink":"http://blog.keepmovingxin.com/tags/Git/","url":"/async/tags/Git.json","count":2}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/27/Git-Config.json","date":1461745888000,"path":{"year":2016,"month":4,"day":27,"name":"Git-Config"},"title":"Git Config命令查看配置文件","permalink":"http://blog.keepmovingxin.com/2016/04/27/Git-Config/","content":"<p>git config命令的基本使用</p>\n<h3 id=\"配置文件如何生效\"><a href=\"#配置文件如何生效\" class=\"headerlink\" title=\"配置文件如何生效\"></a>配置文件如何生效</h3><p>对于 <code>git</code> 来说，配置文件的权重是 仓库&gt;全局&gt;系统。<br><code>Git</code> 会使用这一系列的配置文件来存储你定义的偏好，它首先会查找 <code>/etc/gitconfig</code> 文件（系统级），该文件含有对系统上所有用户及他们所拥有的仓库都生效的配置值。<br>接下来 <code>Git</code> 会查找每个用户的 <code>~/.gitconfig</code> 文件（全局级）。<br>最后 <code>Git</code> 会查找由用户定义的各个库中<code>Git</code>目录下的配置文件 <code>.git/config</code>（仓库级），该文件中的值只对当前所属仓库有效。<br>以上阐述的三 层配置从一般到特殊层层推进，如果定义的值有冲突，以后面层中定义的为准，例如：<code>.git/config</code> 和 <code>/etc/gitconfig</code> 的较量中， <code>.git/config</code> 取得了胜利。</p>"}]}