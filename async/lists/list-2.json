{"_total":14,"_totalPage":2,"_page":2,"posts":[{"tags":[{"name":"Vim","permalink":"http://blog.keepmovingxin.com/tags/Vim/","url":"/async/tags/Vim.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/29/vi-vim-delete-M.json","date":1461908371000,"path":{"year":2016,"month":4,"day":29,"name":"vi-vim-delete-M"},"title":"vi/vim显示中文字符并且去掉^M的方法","permalink":"http://blog.keepmovingxin.com/2016/04/29/vi-vim-delete-M/","content":"<p>处理项目xml配置时vim打开经常会碰到中文显示不正常的现象，也就是传说中的乱码，搜索找到一个解决办法，记录一下，但是gbk编码的正常了，utf8的又不对了，于是稍微改了一点。</p>"},{"tags":[{"name":"Linux","permalink":"http://blog.keepmovingxin.com/tags/Linux/","url":"/async/tags/Linux.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/28/Linux-Commond.json","date":1461830572000,"path":{"year":2016,"month":4,"day":28,"name":"Linux-Commond"},"title":"Linux常用命令学习","permalink":"http://blog.keepmovingxin.com/2016/04/28/Linux-Commond/","content":"<h3 id=\"同步时间\"><a href=\"#同步时间\" class=\"headerlink\" title=\"同步时间\"></a>同步时间</h3><p>以管理员身份执行如下命令，可以自动与网络时间同步：<br>time.nist.gov 是一个时间服务器<br><code>$ rdate -s time.nist.gov</code></p>"},{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":3}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":7}],"url":"/async/posts/2016/04/27/cocos2d-x-GraySprite.json","date":1461750466000,"path":{"year":2016,"month":4,"day":27,"name":"cocos2d-x-GraySprite"},"title":"Cocos2d-x使用CCGLProgram和Shader文件实现精灵置灰","permalink":"http://blog.keepmovingxin.com/2016/04/27/cocos2d-x-GraySprite/","content":"<h4 id=\"1-实现方法\"><a href=\"#1-实现方法\" class=\"headerlink\" title=\"1. 实现方法\"></a>1. 实现方法</h4><p><code>CCGraySprite</code> 继承自 <code>CCSprite</code> 覆盖<code>initWithTexture</code>和<code>draw</code>方法实现置灰。<br>"},{"tags":[{"name":"Git","permalink":"http://blog.keepmovingxin.com/tags/Git/","url":"/async/tags/Git.json","count":2}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/27/Git-Config.json","date":1461745888000,"path":{"year":2016,"month":4,"day":27,"name":"Git-Config"},"title":"Git Config命令查看配置文件","permalink":"http://blog.keepmovingxin.com/2016/04/27/Git-Config/","content":"<p>git config命令的基本使用</p>\n<h3 id=\"配置文件如何生效\"><a href=\"#配置文件如何生效\" class=\"headerlink\" title=\"配置文件如何生效\"></a>配置文件如何生效</h3><p>对于 <code>git</code> 来说，配置文件的权重是 仓库&gt;全局&gt;系统。<br><code>Git</code> 会使用这一系列的配置文件来存储你定义的偏好，它首先会查找 <code>/etc/gitconfig</code> 文件（系统级），该文件含有对系统上所有用户及他们所拥有的仓库都生效的配置值。<br>接下来 <code>Git</code> 会查找每个用户的 <code>~/.gitconfig</code> 文件（全局级）。<br>最后 <code>Git</code> 会查找由用户定义的各个库中<code>Git</code>目录下的配置文件 <code>.git/config</code>（仓库级），该文件中的值只对当前所属仓库有效。<br>以上阐述的三 层配置从一般到特殊层层推进，如果定义的值有冲突，以后面层中定义的为准，例如：<code>.git/config</code> 和 <code>/etc/gitconfig</code> 的较量中， <code>.git/config</code> 取得了胜利。</p>"}]}