{"_total":12,"_totalPage":2,"_page":2,"posts":[{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":3}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":5}],"url":"/async/posts/2016/04/27/cocos2d-x-GraySprite.json","date":1461750466000,"path":{"year":2016,"month":4,"day":27,"name":"cocos2d-x-GraySprite"},"title":"Cocos2d-x使用CCGLProgram和Shader文件实现精灵置灰","permalink":"http://blog.keepmovingxin.com/2016/04/27/cocos2d-x-GraySprite/","content":"<h4 id=\"1-实现方法：CCGraySprite-继承自-CCSprite-覆盖initWithTexture和draw方法实现置灰。\"><a href=\"#1-实现方法：CCGraySprite-继承自-CCSprite-覆盖initWithTexture和draw方法实现置灰。\" class=\"headerlink\" title=\"1. 实现方法：CCGraySprite 继承自 CCSprite 覆盖initWithTexture和draw方法实现置灰。\"></a>1. 实现方法：<code>CCGraySprite</code> 继承自 <code>CCSprite</code> 覆盖<code>initWithTexture</code>和<code>draw</code>方法实现置灰。</h4><h5 id=\"方法和属性声明：\"><a href=\"#方法和属性声明：\" class=\"headerlink\" title=\"方法和属性声明：\"></a>方法和属性声明：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CCGraySprite : public CCSprite&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    CCGraySprite();</span><br><span class=\"line\">    virtual ~CCGraySprite();</span><br><span class=\"line\">    static CCGraySprite* create(const char* pszFileName);</span><br><span class=\"line\">    bool initWithTexture(CCTexture2D* pTexture, const CCRect&amp; tRect);</span><br><span class=\"line\">    static CCGraySprite* createWithSprite(CCSprite *pSprite);</span><br><span class=\"line\">    static CCGraySprite* createWithNodeAndItChild(CCNode *pNode);</span><br><span class=\"line\">    void setGray(bool isGray);</span><br><span class=\"line\">    virtual void draw();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    bool m_isGray;</span><br><span class=\"line\">    CCGLProgram* pProgram;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>m_isGray</code> 是否置灰</li>\n<li><code>pProgram</code> 保存置灰的GL程序</li>\n</ul>"},{"tags":[{"name":"Git","permalink":"http://blog.keepmovingxin.com/tags/Git/","url":"/async/tags/Git.json","count":2}],"categories":[{"name":"工具","permalink":"http://blog.keepmovingxin.com/categories/工具/","url":"/async/categories/工具.json","count":7}],"url":"/async/posts/2016/04/27/Git-Config.json","date":1461745888000,"path":{"year":2016,"month":4,"day":27,"name":"Git-Config"},"title":"Git Config命令查看配置文件","permalink":"http://blog.keepmovingxin.com/2016/04/27/Git-Config/","content":"<p>git config命令的基本使用</p>\n<h3 id=\"配置文件如何生效\"><a href=\"#配置文件如何生效\" class=\"headerlink\" title=\"配置文件如何生效\"></a>配置文件如何生效</h3><p>对于 git 来说，配置文件的权重是仓库&gt;全局&gt;系统。Git 会使用这一系列的配置文件来存储你定义的偏好，它首先会查找 /etc/gitconfig 文件（系统级），该文件含有对系统上所有用户及他们所拥有的仓库都生效的配置值。接下来 Git 会查找每个用户的 ~/.gitconfig 文件（全局级）。最后 Git 会查找由用户定义的各个库中Git目录下的配置文件 .git/config（仓库级），该文件中的值只对当前所属仓库有效。以上阐述的三 层配置从一般到特殊层层推进，如果定义的值有冲突，以后面层中定义的为准，例如：.git/config 和 /etc/gitconfig 的较量中， .git/config 取得了胜利。</p>"}]}