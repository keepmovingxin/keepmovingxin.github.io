{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":5,"_total":5,"_totalPage":1,"_page":1,"posts":[{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":3}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":5}],"url":"/async/posts/2016/05/09/Cocos2dx-CCRenderTexture.json","date":1462804288000,"path":{"year":2016,"month":5,"day":9,"name":"Cocos2dx-CCRenderTexture"},"title":"Cocos2d-x中动态纹理CCRenderTexture的使用","permalink":"http://blog.keepmovingxin.com/2016/05/09/Cocos2dx-CCRenderTexture/","content":"<p>记录一下Cocos2d-x中动态纹理<code>CCRenderTexture</code>的各种应用，实现截屏、阴影等等<br>使用<code>CCRenderTexture</code>需要做以下5步:</p>\n<ol>\n<li>创建一个新的<code>CCRenderTexture</code>. 这里，你可以指定将要创建的纹理的宽度和高度。</li>\n<li>调用 <code>CCRenderTexture:begin</code>. 这个方法会启动OpenGL，并且接下来，任何绘图的命令都会渲染到<code>CCRenderTexture</code>里面去，而不是画到屏幕上。</li>\n<li>绘制纹理. 你可以使用原始的<code>OpenGL</code>调用来绘图，或者你也可以使用cocos2d对象里面已经定义好的<code>visit</code>方法。（这个visit方法就会调用一些opengl命令来绘制cocos2d对象）</li>\n<li>调用 <code>CCRenderTexture:end</code>. 这个方法会渲染纹理，并且会关闭渲染至<code>CCRenderTexture</code>的通道。</li>\n<li>从生成的纹理中创建一个<code>sprite</code>. 你现在可以用<code>CCRenderTexture</code>的<code>sprite.texture</code>属性来轻松创建新的精灵了。</li>\n</ol>"},{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":3},{"name":"Lua","permalink":"http://blog.keepmovingxin.com/tags/Lua/","url":"/async/tags/Lua.json","count":3},{"name":"tolua","permalink":"http://blog.keepmovingxin.com/tags/tolua/","url":"/async/tags/tolua.json","count":1}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":5}],"url":"/async/posts/2016/05/14/Cocos2dx-tolua++.json","date":1463234968000,"path":{"year":2016,"month":5,"day":14,"name":"Cocos2dx-tolua++"},"title":"(译)tolua参考手册--accessing C/C++ code from Lua","permalink":"http://blog.keepmovingxin.com/2016/05/14/Cocos2dx-tolua++/","content":"<p>项目使用Cocos2dx+lua框架做的，用到luabinding实现C++代码绑定到lua层使用，所以学习一下tolua++工具的原理和使用，在这做个记录。</p>\n<p>tolua++是tolua的扩展版本，是一款能够集成C/C++与lua代码的工具。在面向C++方面，tolua++包含了一些新的特性比如：</p>\n<ul>\n<li>支持<code>std::string</code>作为基本类型（这个可以由一个命令行选项关闭）</li>\n<li>支持类模板</li>\n</ul>\n<p><a href=\"http://www.tecgraf.puc-rio.br/~celes/tolua/\">tolua</a>这款工具，极大的简化了C/C++代码与lua代码的集成。基于一个干净的头文件（或者从实际头文件中提取），tolua会自动生成从lua访问C/C++功能的绑定代码。使用Lua API和标记方法设施，tolua解析C/C++常数，外部变量、函数、类和方法绑定到Lua。</p>\n<p><a href=\"http://webserver2.tecgraf.puc-rio.br/~celes/tolua/\">官网</a><br><a href=\"http://webserver2.tecgraf.puc-rio.br/~celes/tolua/tolua-3.2.html\">官网文档</a></p>"},{"tags":[{"name":"Lua","permalink":"http://blog.keepmovingxin.com/tags/Lua/","url":"/async/tags/Lua.json","count":3}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":5}],"url":"/async/posts/2016/05/27/Lua-global.json","date":1464359412000,"path":{"year":2016,"month":5,"day":27,"name":"Lua-global"},"title":"Lua 全局变量的那些事儿","permalink":"http://blog.keepmovingxin.com/2016/05/27/Lua-global/","content":"<p>最近项目查了一个问题，最后发现和<code>_G[moduleName]</code>这个置为<code>nil</code>有关系，找了点资料看看里面的坑还是蛮深的，所以记录一下。</p>\n<h3 id=\"全局环境表-G\"><a href=\"#全局环境表-G\" class=\"headerlink\" title=\"全局环境表 _G\"></a>全局环境表 <code>_G</code></h3><p>Lua把所有的全局变量都放在一个称为全局环境的表_G中，这个表只是个普通的表。注意<code>_G._G == _G</code>。<br>由于<code>_G</code>是一个普通的表，所以提供了以动态名称访问全局变量的形式，这又是Lua的一种对元编程的支持。</p>\n<p>如<code>_G[varname] = value</code>，更一般的问题是允许使用动态字段名，如_G[“read.io”]默认是不会取出read模块的io字段的，但是使用下面这样实现：</p>"},{"tags":[{"name":"Lua","permalink":"http://blog.keepmovingxin.com/tags/Lua/","url":"/async/tags/Lua.json","count":3}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":5}],"url":"/async/posts/2016/05/25/Lua-metable.json","date":1464161405000,"path":{"year":2016,"month":5,"day":25,"name":"Lua-metable"},"title":"了解Lua metatable 元表","permalink":"http://blog.keepmovingxin.com/2016/05/25/Lua-metable/","content":"<p>参考lua手册，<code>metatable</code>是被译作元表，Lua 中的每个值都可以用一个 <code>metatable</code>。这个 <code>metatable</code> 就是一个原始的 Lua table，它用来定义原始值在特定操作下的行为。</p>\n<h3 id=\"metatable\"><a href=\"#metatable\" class=\"headerlink\" title=\"metatable\"></a><code>metatable</code></h3><p>一个 <code>metatable</code> 可以控制一个对象做数学运算操作、比较操作、连接操作、取长度操作、取下标操作时的行为，metatable 中还可以定义一个函数，让 <code>userdata</code> 作垃圾收集时调用它。对于这些操作，Lua 都将其关联上一个被称作事件的指定健。当 Lua 需要对一个值发起这些操作中的一个时，它会去检查值中 metatable 中是否有对应事件。如果有的话，键名对应的值（元方法）将控制 Lua 怎样做这个操作。</p>"},{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":3}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":5}],"url":"/async/posts/2016/04/27/cocos2d-x-GraySprite.json","date":1461750466000,"path":{"year":2016,"month":4,"day":27,"name":"cocos2d-x-GraySprite"},"title":"Cocos2d-x使用CCGLProgram和Shader文件实现精灵置灰","permalink":"http://blog.keepmovingxin.com/2016/04/27/cocos2d-x-GraySprite/","content":"<h4 id=\"1-实现方法\"><a href=\"#1-实现方法\" class=\"headerlink\" title=\"1. 实现方法\"></a>1. 实现方法</h4><p><code>CCGraySprite</code> 继承自 <code>CCSprite</code> 覆盖<code>initWithTexture</code>和<code>draw</code>方法实现置灰。</p>\n<h5 id=\"方法和属性声明\"><a href=\"#方法和属性声明\" class=\"headerlink\" title=\"方法和属性声明\"></a>方法和属性声明</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CCGraySprite : public CCSprite&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    CCGraySprite();</span><br><span class=\"line\">    virtual ~CCGraySprite();</span><br><span class=\"line\">    static CCGraySprite* create(const char* pszFileName);</span><br><span class=\"line\">    bool initWithTexture(CCTexture2D* pTexture, const CCRect&amp; tRect);</span><br><span class=\"line\">    static CCGraySprite* createWithSprite(CCSprite *pSprite);</span><br><span class=\"line\">    static CCGraySprite* createWithNodeAndItChild(CCNode *pNode);</span><br><span class=\"line\">    void setGray(bool isGray);</span><br><span class=\"line\">    virtual void draw();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    bool m_isGray;</span><br><span class=\"line\">    CCGLProgram* pProgram;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>m_isGray</code> 是否置灰</li>\n<li><code>pProgram</code> 保存置灰的GL程序</li>\n</ul>"}]}