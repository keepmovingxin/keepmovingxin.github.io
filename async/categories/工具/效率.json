{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7,"_total":7,"_totalPage":1,"_page":1,"posts":[{"tags":[{"name":"Git","permalink":"http://blog.keepmovingxin.com/tags/Git/","url":"/async/tags/Git.json","count":2}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/27/Git-Config.json","date":1461745888000,"path":{"year":2016,"month":4,"day":27,"name":"Git-Config"},"title":"Git Config命令查看配置文件","permalink":"http://blog.keepmovingxin.com/2016/04/27/Git-Config/","content":"<p>git config命令的基本使用</p>\n<h3 id=\"配置文件如何生效\"><a href=\"#配置文件如何生效\" class=\"headerlink\" title=\"配置文件如何生效\"></a>配置文件如何生效</h3><p>对于 <code>git</code> 来说，配置文件的权重是 仓库&gt;全局&gt;系统。<br><code>Git</code> 会使用这一系列的配置文件来存储你定义的偏好，它首先会查找 <code>/etc/gitconfig</code> 文件（系统级），该文件含有对系统上所有用户及他们所拥有的仓库都生效的配置值。<br>接下来 <code>Git</code> 会查找每个用户的 <code>~/.gitconfig</code> 文件（全局级）。<br>最后 <code>Git</code> 会查找由用户定义的各个库中<code>Git</code>目录下的配置文件 <code>.git/config</code>（仓库级），该文件中的值只对当前所属仓库有效。<br>以上阐述的三 层配置从一般到特殊层层推进，如果定义的值有冲突，以后面层中定义的为准，例如：<code>.git/config</code> 和 <code>/etc/gitconfig</code> 的较量中， <code>.git/config</code> 取得了胜利。</p>"},{"tags":[{"name":"Git","permalink":"http://blog.keepmovingxin.com/tags/Git/","url":"/async/tags/Git.json","count":2}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/05/20/Git-Workflow.json","date":1463755288000,"path":{"year":2016,"month":5,"day":20,"name":"Git-Workflow"},"title":"Git 常用命令用法：程序员的场景","permalink":"http://blog.keepmovingxin.com/2016/05/20/Git-Workflow/","content":"<p>Git 相比 Subversion，无论概念上还是使用上，复杂度其实是高出一个等级的。为什么这么说？分别看下 <code>git help -a</code> 和 <code>svn help</code> 命令清单的对比，单按这个来看，就如果要掌握所有命令的用法，Git 的学习曲线绝对是比 Subversion 高的。尽管如此，但还是有越来越多项目开始用 Git 来做源码管理了。</p>\n<p>实际中，我们用到的的 Git 命令还是很有限的，可能也就 <code>git help</code> 中那些而已。下面就类似 <a href=\"http://blog.keepmovingxin.com/2016/05/20/SVN-Workflow/\">SVN命令用法：程序员的场景</a> 一样，结合实际场景说下 Git 的常用命令用法。<br>"},{"tags":[{"name":"Linux","permalink":"http://blog.keepmovingxin.com/tags/Linux/","url":"/async/tags/Linux.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/28/Linux-Commond.json","date":1461830572000,"path":{"year":2016,"month":4,"day":28,"name":"Linux-Commond"},"title":"Linux常用命令学习","permalink":"http://blog.keepmovingxin.com/2016/04/28/Linux-Commond/","content":"<h3 id=\"同步时间\"><a href=\"#同步时间\" class=\"headerlink\" title=\"同步时间\"></a>同步时间</h3><p>以管理员身份执行如下命令，可以自动与网络时间同步：<br>time.nist.gov 是一个时间服务器<br><code>$ rdate -s time.nist.gov</code></p>"},{"tags":[{"name":"shell","permalink":"http://blog.keepmovingxin.com/tags/shell/","url":"/async/tags/shell.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/05/02/Learn-shell.json","date":1462179052000,"path":{"year":2016,"month":5,"day":2,"name":"Learn-shell"},"title":"shell学习笔记","permalink":"http://blog.keepmovingxin.com/2016/05/02/Learn-shell/","content":"<h3 id=\"Shell脚本\"><a href=\"#Shell脚本\" class=\"headerlink\" title=\"Shell脚本\"></a>Shell脚本</h3><h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h4><p>首行        <code>#!/bin/bash 指定解释器</code></p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p><code>&#39;#&#39;</code>开头的行，<code>&#39;#!&#39;</code>是例外<br>此外，<code>#</code> 是特殊字符，可以出现在一些参数代换结构和在数值常量表达式中，具有特殊含义，而不会开启一个注释。<code>‘\\#’</code>也不会开启一个注释。</p>"},{"tags":[{"name":"SVN","permalink":"http://blog.keepmovingxin.com/tags/SVN/","url":"/async/tags/SVN.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/05/20/SVN-Workflow.json","date":1463754719000,"path":{"year":2016,"month":5,"day":20,"name":"SVN-Workflow"},"title":"SVN命令用法：程序员的场景","permalink":"http://blog.keepmovingxin.com/2016/05/20/SVN-Workflow/","content":"<p>SVN有不少命令，其实常用的也就那么几个，可以结合下实际的使用场景，来说明下SVN的命令用法。<br>当然可能对很多人来说，最实用的熟悉方式，就是直接运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn help (?, h)</span><br></pre></td></tr></table></figure></p>\n<p>就入门了，但为了更好的记忆，有个实际场景也是个不错的选择。<br>注解：括号中的是该命令的缩写或别名，有的可以少打几个字母，后面也有类似描述。<br>"},{"tags":[{"name":"pngquant","permalink":"http://blog.keepmovingxin.com/tags/pngquant/","url":"/async/tags/pngquant.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/30/pngquant-compress-png.json","date":1462021888000,"path":{"year":2016,"month":4,"day":30,"name":"pngquant-compress-png"},"title":"利用pngquant压缩png图片","permalink":"http://blog.keepmovingxin.com/2016/04/30/pngquant-compress-png/","content":"<p>项目包体积越来越大，为了压缩包大小找到一个比较好用的png图片压缩工具，在这记录一下。</p>\n<h3 id=\"安装并配置全局变量\"><a href=\"#安装并配置全局变量\" class=\"headerlink\" title=\"安装并配置全局变量\"></a>安装并配置全局变量</h3><p>安装：<br>去官网下载压缩包 或者 源码: <code>git clone git://github.com/pornel/pngquant.git</code><br>也可以使用HomeBrew安装：<code>brew install pngquant</code><br>配置全局变量(使用HomeBrew安装请忽略)：<br><code>ln –s /下载的位置/pngquant /usr/local/bin/pngquant</code><br>pngquant 可以愉快的玩耍啦！</p>"},{"tags":[{"name":"Vim","permalink":"http://blog.keepmovingxin.com/tags/Vim/","url":"/async/tags/Vim.json","count":1}],"categories":[{"name":"工具/效率","permalink":"http://blog.keepmovingxin.com/categories/工具-效率/","url":"/async/categories/工具/效率.json","count":7}],"url":"/async/posts/2016/04/29/vi-vim-delete-M.json","date":1461908371000,"path":{"year":2016,"month":4,"day":29,"name":"vi-vim-delete-M"},"title":"vi/vim显示中文字符并且去掉^M的方法","permalink":"http://blog.keepmovingxin.com/2016/04/29/vi-vim-delete-M/","content":"<p>处理项目xml配置时vim打开经常会碰到中文显示不正常的现象，也就是传说中的乱码，搜索找到一个解决办法，记录一下，但是gbk编码的正常了，utf8的又不对了，于是稍微改了一点。</p>"}]}