{"tags":[{"name":"Cocos2d-x","permalink":"http://blog.keepmovingxin.com/tags/Cocos2d-x/","url":"/async/tags/Cocos2d-x.json","count":3}],"categories":[{"name":"游戏开发","permalink":"http://blog.keepmovingxin.com/categories/游戏开发/","url":"/async/categories/游戏开发.json","count":5}],"url":"/async/posts/2016/04/27/cocos2d-x-GraySprite.json","date":1461750466000,"path":{"year":2016,"month":4,"day":27,"name":"cocos2d-x-GraySprite"},"title":"Cocos2d-x使用CCGLProgram和Shader文件实现精灵置灰","permalink":"http://blog.keepmovingxin.com/2016/04/27/cocos2d-x-GraySprite/","content":"<h4 id=\"1-实现方法\"><a href=\"#1-实现方法\" class=\"headerlink\" title=\"1. 实现方法\"></a>1. 实现方法</h4><p><code>CCGraySprite</code> 继承自 <code>CCSprite</code> 覆盖<code>initWithTexture</code>和<code>draw</code>方法实现置灰。</p>\n<h5 id=\"方法和属性声明\"><a href=\"#方法和属性声明\" class=\"headerlink\" title=\"方法和属性声明\"></a>方法和属性声明</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CCGraySprite : public CCSprite&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    CCGraySprite();</span><br><span class=\"line\">    virtual ~CCGraySprite();</span><br><span class=\"line\">    static CCGraySprite* create(const char* pszFileName);</span><br><span class=\"line\">    bool initWithTexture(CCTexture2D* pTexture, const CCRect&amp; tRect);</span><br><span class=\"line\">    static CCGraySprite* createWithSprite(CCSprite *pSprite);</span><br><span class=\"line\">    static CCGraySprite* createWithNodeAndItChild(CCNode *pNode);</span><br><span class=\"line\">    void setGray(bool isGray);</span><br><span class=\"line\">    virtual void draw();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    bool m_isGray;</span><br><span class=\"line\">    CCGLProgram* pProgram;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>m_isGray</code> 是否置灰</li>\n<li><code>pProgram</code> 保存置灰的GL程序</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"2-shader字符串\"><a href=\"#2-shader字符串\" class=\"headerlink\" title=\"2. shader字符串\"></a>2. shader字符串</h4><p>可以像官方那样写在一个.h文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLchar* pszFragSource = (GLchar*)</span><br><span class=\"line\">        &quot;#ifdef GL_ES \\n \\</span><br><span class=\"line\">        precision mediump float; \\n \\</span><br><span class=\"line\">        #endif \\n \\</span><br><span class=\"line\">        uniform sampler2D u_texture; \\n \\</span><br><span class=\"line\">        varying vec2 v_texCoord; \\n \\</span><br><span class=\"line\">        varying vec4 v_fragmentColor; \\n \\</span><br><span class=\"line\">        void main(void) \\n \\</span><br><span class=\"line\">        &#123; \\n \\</span><br><span class=\"line\">        // Convert to greyscale using NTSC weightings \\n \\</span><br><span class=\"line\">        vec4 col = texture2D(u_texture, v_texCoord); \\n \\</span><br><span class=\"line\">        float grey = dot(col.rgb, vec3(0.299, 0.587, 0.114)); \\n \\</span><br><span class=\"line\">        gl_FragColor = vec4(grey, grey, grey, col.a); \\n \\</span><br><span class=\"line\">        &#125;&quot;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-核心代码\"><a href=\"#3-核心代码\" class=\"headerlink\" title=\"3. 核心代码\"></a>3. 核心代码</h4><ul>\n<li>覆盖父类的<code>initWithTexture</code>和<code>draw</code>方法，根据<code>m_isGray</code>调用对应GL程序进行渲染绘制精灵</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void CCGraySprite::setGray(bool isGray) &#123;</span><br><span class=\"line\">    m_isGray = isGray;</span><br><span class=\"line\">    if (isGray == true) &#123;</span><br><span class=\"line\">        this-&gt;setShaderProgram(pProgram);</span><br><span class=\"line\">    &#125;else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this-&gt;setShaderProgram(CCShaderCache::sharedShaderCache()-&gt;programForKey(kCCShader_PositionTextureColor));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool CCGraySprite::initWithTexture(CCTexture2D* pTexture, const CCRect&amp; tRect )&#123;</span><br><span class=\"line\">    m_isGray = true;</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">        CC_BREAK_IF(!CCSprite::initWithTexture(pTexture, tRect));</span><br><span class=\"line\"></span><br><span class=\"line\">        GLchar* pszFragSource = (GLchar*)</span><br><span class=\"line\">        &quot;#ifdef GL_ES \\n \\</span><br><span class=\"line\">        precision mediump float; \\n \\</span><br><span class=\"line\">        #endif \\n \\</span><br><span class=\"line\">        uniform sampler2D u_texture; \\n \\</span><br><span class=\"line\">        varying vec2 v_texCoord; \\n \\</span><br><span class=\"line\">        varying vec4 v_fragmentColor; \\n \\</span><br><span class=\"line\">        void main(void) \\n \\</span><br><span class=\"line\">        &#123; \\n \\</span><br><span class=\"line\">        // Convert to greyscale using NTSC weightings \\n \\</span><br><span class=\"line\">        vec4 col = texture2D(u_texture, v_texCoord); \\n \\</span><br><span class=\"line\">        float grey = dot(col.rgb, vec3(0.299, 0.587, 0.114)); \\n \\</span><br><span class=\"line\">        gl_FragColor = vec4(grey, grey, grey, col.a); \\n \\</span><br><span class=\"line\">        &#125;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        pProgram = new CCGLProgram();</span><br><span class=\"line\">        pProgram-&gt;initWithVertexShaderByteArray(ccPositionTextureColor_vert, pszFragSource);</span><br><span class=\"line\">        this-&gt;setShaderProgram(pProgram);</span><br><span class=\"line\">        CHECK_GL_ERROR_DEBUG();</span><br><span class=\"line\"></span><br><span class=\"line\">        this-&gt;getShaderProgram()-&gt;addAttribute(kCCAttributeNamePosition, kCCVertexAttrib_Position);</span><br><span class=\"line\">        this-&gt;getShaderProgram()-&gt;addAttribute(kCCAttributeNameColor, kCCVertexAttrib_Color);</span><br><span class=\"line\">        this-&gt;getShaderProgram()-&gt;addAttribute(kCCAttributeNameTexCoord, kCCVertexAttrib_TexCoords);</span><br><span class=\"line\">        CHECK_GL_ERROR_DEBUG();</span><br><span class=\"line\"></span><br><span class=\"line\">        this-&gt;getShaderProgram()-&gt;link();</span><br><span class=\"line\">        CHECK_GL_ERROR_DEBUG();</span><br><span class=\"line\"></span><br><span class=\"line\">        this-&gt;getShaderProgram()-&gt;updateUniforms();</span><br><span class=\"line\">        CHECK_GL_ERROR_DEBUG();</span><br><span class=\"line\"></span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125; while (0);</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void CCGraySprite::draw()&#123;</span><br><span class=\"line\">    if (this-&gt;getTexture() == NULL) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(m_isGray == false)&#123;</span><br><span class=\"line\">        CCSprite::draw();</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ccGLEnableVertexAttribs(kCCVertexAttribFlag_PosColorTex );</span><br><span class=\"line\">    ccGLBlendFunc( m_sBlendFunc.src, m_sBlendFunc.dst );</span><br><span class=\"line\"></span><br><span class=\"line\">    this-&gt;getShaderProgram()-&gt;use();</span><br><span class=\"line\">    this-&gt;getShaderProgram()-&gt;setUniformsForBuiltins();</span><br><span class=\"line\"></span><br><span class=\"line\">    ccGLBindTexture2D( this-&gt;getTexture()-&gt;getName() );</span><br><span class=\"line\"></span><br><span class=\"line\">\t#define kQuadSize sizeof(m_sQuad.bl)</span><br><span class=\"line\">    long offset = (long)&amp;m_sQuad;</span><br><span class=\"line\"></span><br><span class=\"line\">    // vertex</span><br><span class=\"line\">    int diff = offsetof( ccV3F_C4B_T2F, vertices);</span><br><span class=\"line\">    glVertexAttribPointer(kCCVertexAttrib_Position, 3, GL_FLOAT, GL_FALSE, kQuadSize, (void*) (offset + diff));</span><br><span class=\"line\"></span><br><span class=\"line\">    // texCoods</span><br><span class=\"line\">    diff = offsetof( ccV3F_C4B_T2F, texCoords);</span><br><span class=\"line\">    glVertexAttribPointer(kCCVertexAttrib_TexCoords, 2, GL_FLOAT, GL_FALSE, kQuadSize, (void*)(offset + diff));</span><br><span class=\"line\"></span><br><span class=\"line\">    // color</span><br><span class=\"line\">    diff = offsetof( ccV3F_C4B_T2F, colors);</span><br><span class=\"line\">    glVertexAttribPointer(kCCVertexAttrib_Color, 4, GL_UNSIGNED_BYTE, GL_TRUE, kQuadSize, (void*)(offset + diff));</span><br><span class=\"line\">    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);</span><br><span class=\"line\">    CC_INCREMENT_GL_DRAWS(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-lua使用示例\"><a href=\"#4-lua使用示例\" class=\"headerlink\" title=\"4. lua使用示例\"></a>4. lua使用示例</h4><ul>\n<li>需手写.pkg文件，使用tolua++工具导出Lua binding文件，在AppDelegate::applicationDidFinishLaunching()注册后，方可在lua层使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local nameBgSp = CCGraySprite:create(&quot;images/namebg.png&quot;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local normalSp = CCSprite:create(&quot;images/namebg.png&quot;)</span><br><span class=\"line\">local graySp = CCGraySprite:createWithNodeAndItChild(normalSp)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local frameSp = CCGraySprite:create(&quot;images/frame.png&quot;)</span><br><span class=\"line\">frameSp:setGray(isGray)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>版权声明</strong><br><a href=\"http://blog.keepmovingxin.com\">KeepMoving</a> by <a href=\"http://blog.keepmovingxin.com/about\">KP_小新</a> 采用 <a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" rel=\"external\">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a><br>Copyright © 2016 <a href=\"http://blog.keepmovingxin.com\">KeepMoving</a>. All rights reserved.</p>\n<h2 id=\"原文链接：http-blog-keepmovingxin-com-2016-04-27-cocos2d-x-GraySprite\"><a href=\"#原文链接：http-blog-keepmovingxin-com-2016-04-27-cocos2d-x-GraySprite\" class=\"headerlink\" title=\"原文链接：http://blog.keepmovingxin.com/2016/04/27/cocos2d-x-GraySprite/\"></a>原文链接：<a href=\"http://blog.keepmovingxin.com/2016/04/27/cocos2d-x-GraySprite/\">http://blog.keepmovingxin.com/2016/04/27/cocos2d-x-GraySprite/</a></h2><p>扫描二维码或在微信中搜索 KeepMovingXin<br><img src=\"/images/qrcode.jpg\" alt=\"欢迎关注微信公众号！\"></p>\n"}