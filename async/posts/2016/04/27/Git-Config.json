{"tags":[{"name":"Git","permalink":"http://blog.keepmovingxin.com/tags/Git/","url":"/async/tags/Git.json","count":1}],"categories":[{"name":"工具","permalink":"http://blog.keepmovingxin.com/categories/工具/","url":"/async/categories/工具.json","count":5}],"url":"/async/posts/2016/04/27/Git-Config.json","date":1461745888000,"path":{"year":2016,"month":4,"day":27,"name":"Git-Config"},"title":"Git Config命令查看配置文件","permalink":"http://blog.keepmovingxin.com/2016/04/27/Git-Config/","content":"<p>git config命令的基本使用</p>\n<h3 id=\"配置文件如何生效\"><a href=\"#配置文件如何生效\" class=\"headerlink\" title=\"配置文件如何生效\"></a>配置文件如何生效</h3><p>对于 git 来说，配置文件的权重是仓库&gt;全局&gt;系统。Git 会使用这一系列的配置文件来存储你定义的偏好，它首先会查找 /etc/gitconfig 文件（系统级），该文件含有对系统上所有用户及他们所拥有的仓库都生效的配置值。接下来 Git 会查找每个用户的 ~/.gitconfig 文件（全局级）。最后 Git 会查找由用户定义的各个库中Git目录下的配置文件 .git/config（仓库级），该文件中的值只对当前所属仓库有效。以上阐述的三 层配置从一般到特殊层层推进，如果定义的值有冲突，以后面层中定义的为准，例如：.git/config 和 /etc/gitconfig 的较量中， .git/config 取得了胜利。</p>\n<a id=\"more\"></a>\n<h3 id=\"使用-git-config-命令查看配置文件\"><a href=\"#使用-git-config-命令查看配置文件\" class=\"headerlink\" title=\"使用 git config 命令查看配置文件\"></a>使用 git config 命令查看配置文件</h3><p>命令参数–list, 简写 -l</p>\n<p>格式：<code>git config [–local|–global|–system] -l</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看仓库级的 config，命令：git config –local -l</span><br><span class=\"line\">查看全局级的 config，命令：git config –global -l</span><br><span class=\"line\">查看系统级的 config，命令：git config –system -l</span><br><span class=\"line\">查看当前生效的配置，  命令：git config -l</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-git-config-命令编辑配置文件\"><a href=\"#使用-git-config-命令编辑配置文件\" class=\"headerlink\" title=\"使用 git config 命令编辑配置文件\"></a>使用 git config 命令编辑配置文件</h3><p>命令参数 –edit, 简写 -e</p>\n<p>格式：<code>git config [–local|–global|–system] -e</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看仓库级的config，命令：git config –local -e，与–list参数不同的是，git config -e默认是编辑仓库级的配置文件。</span><br><span class=\"line\">查看全局级的config，命令：git config –global -e</span><br><span class=\"line\">查看系统级的config，命令：git config –system -e</span><br></pre></td></tr></table></figure>\n<p>执行这个命令的时候，git 会用配置文件中设定的编辑器打开配置文件。</p>\n<h3 id=\"增加一个配置项\"><a href=\"#增加一个配置项\" class=\"headerlink\" title=\"增加一个配置项\"></a>增加一个配置项</h3><p>参数 –add</p>\n<p>格式: <code>git config [–local|–global|–system] –add section.key value</code> (默认是添加在 local 配置中)</p>\n<p>注意 add 后面的 section,key,value 一项都不能少，否则添加失败。比如我们执行：<code>git config –add man.name jim</code></p>\n<h3 id=\"获取一个配置项\"><a href=\"#获取一个配置项\" class=\"headerlink\" title=\"获取一个配置项\"></a>获取一个配置项</h3><p>有时候，我们并不需要查看所有配置的值，而是查看某个配置项的值，怎么做呢？</p>\n<p>命令参数 –get</p>\n<p>格式：<code>git config [–local|–global|–system] –get section.key</code> (默认是获取 local 配置中内容) 我们先往 global 配置中写入一个 man .name=jim 的配置项，再使用 <code>git config –get man.name</code> 看看得到的是什么</p>\n<hr>\n<p><strong>版权声明</strong><br>Copyright © 2016 <a href=\"http://blog.keepmovingxin.com/\">KeepMoving</a>. All rights reserved.<br>原文链接：<a href=\"http://blog.keepmovingxin.com/2016/04/27/Git-Config/\">http://blog.keepmovingxin.com/2016/04/27/Git-Config/</a></p>\n"}